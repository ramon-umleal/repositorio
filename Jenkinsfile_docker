/**
 * Motor de automação no Jenkins DEVOPS + Dockerfile
 * Versão -001.00
 * CONATEC 27/03/2024
 * SISTEMA = "optimusprime"
 * VM de desenvolvimento 172.17.24.210
 */

def getGitAuthor() {
    return sh(script: 'git log -1 --format=%an', returnStdout: true).trim()
}

pipeline {
    agent { 
        label 'VM-SDF4673-210'
    }
    options {
        buildDiscarder(logRotator( 
            daysToKeepStr: '16', 
            numToKeepStr: '10'
        ))
    }
    environment {
        aguEmails = "ramon.leal@agu.gov.br,danilo.nferreira@agu.gov.br"
        SISTEMA = "optimus-prime"
        APIPATHD = "/home/jenkins/jenkins-agent/workspace/1-OptimusPrime-DEVOP-210"
        APIPATHH = "/home/jenkins/jenkins-agent/workspace/OptimusPrime_HOMOLOG/*"
        PROJ = "/var/www/"
        IPDESENV = "http://sdf4673.agu.gov.br:"
        IPHOMOLOG = "http://sdf4808.agu.gov.br:"
        PORTA = "8096"
        APPNAME = "Sistema OptimusPrime_DEVOP em DOCKER"
        GITAUTHOR = "${env.GIT_COMMITTER_EMAIL}"
        URLD = "${IPDESENV}${PORTA}"
        URLH = "${IPHOMOLOG}${PORTA}"
        SONAQUBE = "http://172.17.24.233:9000/dashboard?id="
        GITHUB = "https://github.com/agu-pgu/optimusprime.git"
    }
    stages {
        stage('Capture Commit Messages') {
            steps {
                script {
                    def changeLogSets = currentBuild.changeSets
                    def commits = []
                    changeLogSets.each { cs ->
                        cs.items.each { item ->
                            commits.add("Commit by ${item.author.fullName}: ${item.msg}")
                        }
                    }
                    env.COMMIT_MESSAGES = commits.join('\n')
                }
            }
        }
        stage('Movendo arquivos') {
            steps {
                echo 'Movendo arquivos...'
                sh "cp -R ${APIPATHD}/* ${PROJ}${SISTEMA}/app"
                sh "cp -R ${APIPATHD}/Dockerfile ${PROJ}${SISTEMA}/"
            }
        }
        stage('Script conteiner') {
            steps {
                script {
                    writeFile file: 'conteiner.sh', text: """
                        #!/bin/bash
                        APP_NAME="${SISTEMA}"
                        PORT="${PORTA}"
                        
                        DOCKER_VOLUME="/var/www/${SISTEMA}/logs:/var/www/${SISTEMA}/logs"
                        docker build --build-arg SISTEMA="\$APP_NAME" --build-arg PORTA="\$PORT" -t "\$APP_NAME" "${PROJ}${SISTEMA}"
                        docker run -d -p "\$PORT":8096 --name "\$APP_NAME" -v "\$DOCKER_VOLUME" "\$APP_NAME"
                    """
                    sh 'chmod a+x conteiner.sh'
                    sh "ls -ll ${PROJ}${SISTEMA}/app"
                }
            }
        }
        stage('Check and remove existing container') {
            steps {
                script {
                    def existingContainerId = sh(script: "docker ps -aqf name=${SISTEMA}", returnStdout: true).trim()
                    if (existingContainerId) {
                        sh "docker stop $existingContainerId"
                        sh "docker rm $existingContainerId"
                    }
                }
            }
        }
        stage('Start docker') {
            steps {
                    echo 'Iniciando o Docker...'
                    script {
                        sh "rm -f ${PROJ}${SISTEMA}/conteiner.sh || true"
                        sh "cp ${WORKSPACE}/conteiner.sh ${PROJ}${SISTEMA}/"
                        sh "chmod +x ${PROJ}${SISTEMA}/conteiner.sh"

                        sh "cd ${PROJ}${SISTEMA}/ && ./conteiner.sh" 
                    }
                }
        }
        stage('Please let me Sleep 7 seconds more') {
            steps {
                echo 'Please let me Sleep 7 seconds more'
                    sleep(time:7, unit: "SECONDS")
                }
        }
        stage('Build') {
            steps {
                script {
                    def response = httpRequest 'http://172.17.24.210:8096/'
                    println("Status: " + response.status)
                    if (response.status.toString() != "200") {
                        println "ERROR:" + errorMsg
                    } else {
                        println "ALL OK!!!. Job ${env.JOB_NAME} Pagina WEB OK deu status ${+response.status} agora sim!!!"
                        sh 'touch SUCCESS.log'
                    }
                }
            }
        }
        stage('Deploy Code to Development') {
            steps {   
                echo "Deploy to Dev"
                script {
                    GITAUTHOR = getGitAuthor()
                    echo "O autor do último commit é: ${GITAUTHOR}"                
                } 
            } 
        }
        stage('Email de notificação') {
            steps {
                echo "Email de notificação"
            }
        }
    }
        post{
            success{
                sh 'echo "Isso sempre será executado quando da success! "'
                archiveArtifacts artifacts: '*.log', onlyIfSuccessful: true
                emailext to: "${aguEmails}",
                subject: "Server jenkins build:${currentBuild.currentResult} Aplicação: ${SISTEMA}",
                body: "<b>Aplicação: ${APPNAME}</b><br> Jenkins build: ${env.BUILD_NUMBER}\n no Servidor ${env.NODE_LABELS}\n<br>O build com STATUS:\n${currentBuild.currentResult}: Job de nome,${env.JOB_NAME}\n<br>Para mais informações\n Acessar o link: ${env.BUILD_URL}<p>\n<br> <br> GITHUB -> ${env.GIT_BRANCH}\n LINK ${env.GIT_URL}</p> \n <br> link do Sistema ${URLD}\n<br><b>O autor do último commit é: ${GITAUTHOR}</b></br>\n<br> Aplicação ${SISTEMA} <b>está no ar.</b>\n<br> Mensagens de Commit:\n${env.COMMIT_MESSAGES}",
                attachmentsPattern: '*.html',
                attachLog: true
                cleanWs()
            }
            failure {
                sh 'echo "Ixe deu erro da uma olhada nos logs failure"'
                sh 'tail -n 25  /var/www/$SISTEMA/logs/access.log > "access.log"'
                sh 'tail -n 25  /var/www/$SISTEMA/logs/error.log > "error.log"'
                sh 'cat /var/www/$SISTEMA/requirements.txt > "requirements.txt"'
                archiveArtifacts artifacts: '*.log', onlyIfSuccessful: true
                emailext to: "${aguEmails}",
                subject: "jenkins build:${currentBuild.currentResult} Aplicação: ${SISTEMA}",
                body: "<b>Aplicação: ${APPNAME}</b><br> Jenkins build: ${env.BUILD_NUMBER}\n no Servidor ${env.NODE_LABELS}\n<br>O build com STATUS:\n${currentBuild.currentResult}: Job de nome,${env.JOB_NAME}\n<br>Para mais informações\n Acessar o link: ${env.BUILD_URL}<p>\n<br>   <br> GITHUB -> ${env.GIT_BRANCH}\n LINK ${env.GIT_URL}</p> \n <br> link do Sistema ${URLD}\n<br><b>O autor do último commit é: ${GITAUTHOR}</b></br>\n<br> Aplicação ${SISTEMA} <b>está no ar.</b>",
                    attachmentsPattern: '*.html',
                    attachLog: true
                    cleanWs()
            }   
        }
}